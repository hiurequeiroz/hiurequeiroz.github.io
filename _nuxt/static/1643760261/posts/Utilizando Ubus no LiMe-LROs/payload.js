__NUXT_JSONP__("/posts/Utilizando%20Ubus%20no%20LiMe-LROs", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B){return {data:[{page:{slug:"Utilizando Ubus no LiMe-LROs",layout:"post",title:"Como Usar o Ubus no LiMe\u002FLROs",date:"2021-02-14 07:40",author:"Hiure",categories:"redescomunitarias",imagem:"images\u002Fterminal.png",descricao:"Como o pacote de ferramentas Ubus, para mexer em tudo que é configuração no seu libremesh",ativo:"sim",toc:[{id:q,depth:r,text:s},{id:t,depth:r,text:u}],body:{type:"root",children:[{type:b,tag:e,props:{},children:[{type:a,value:"Uma das maneiras mais poderosas de encontrar informações na sua rede mesh baseada em openwrt é utilizando o "},{type:b,tag:f,props:{href:"https:\u002F\u002Fopenwrt.org\u002Fdocs\u002Ftechref\u002Fubus",rel:[l,m,n],target:o},children:[{type:a,value:"Ubus"}]},{type:a,value:". Ele fornece uma "},{type:b,tag:f,props:{href:"https:\u002F\u002Fpt.wikipedia.org\u002Fwiki\u002FComunica%C3%A7%C3%A3o_entre_processos",rel:[l,m,n],target:o},children:[{type:a,value:"comunicação entre processos"}]},{type:a,value:" do sistema reunindo assim uma base bem completa de informação. Como ele você pode consultar sobre os processos e caracteristicas do seu sistema como também modificalos."}]},{type:a,value:d},{type:b,tag:v,props:{id:q},children:[{type:b,tag:f,props:{href:"#iniciando-com-ubus",ariaHidden:w,tabIndex:x},children:[{type:b,tag:y,props:{className:[z,A]},children:[]}]},{type:a,value:s}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Se simplesmente digitarmos "},{type:b,tag:c,props:{},children:[{type:a,value:"ubus"}]},{type:a,value:" no terminal temos uma boa ideia de como ele funciona:"}]},{type:a,value:d},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"root@conteiner:~# ubus\nUsage: ubus [\u003Coptions\u003E] \u003Ccommand\u003E [arguments...]\nOptions:\n -s \u003Csocket\u003E:       Set the unix domain socket to connect to\n -t \u003Ctimeout\u003E:      Set the timeout (in seconds) for a command to complete\n -S:            Use simplified output (for scripts)\n -v:            More verbose output\n -m \u003Ctype\u003E:     (for monitor): include a specific message type\n            (can be used more than once)\n -M \u003Cr|t\u003E       (for monitor): only capture received or transmitted traffic\n\nCommands:\n - list [\u003Cpath\u003E]            List objects\n - call \u003Cpath\u003E \u003Cmethod\u003E [\u003Cmessage\u003E] Call an object method\n - listen [\u003Cpath\u003E...]           Listen for events\n - send \u003Ctype\u003E [\u003Cmessage\u003E]      Send an event\n - wait_for \u003Cobject\u003E [\u003Cobject\u003E...]  Wait for multiple objects to appear on ubus\n - monitor              Monitor ubus traffic\n\n\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Temos uma sitaxe simples de usar, podemos começar simplesmente com "},{type:b,tag:c,props:{},children:[{type:a,value:"ubus list"}]},{type:a,value:", e ja vamos ter uma ideia de quais processos estão compartilhando informações:"}]},{type:a,value:d},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"root@conteiner:~# ubus list\ndnsmasq\nhostapd.wlan0-ap\nhostapd.wlan0-apname\nlime-batman-adv\nlime-fbw\nlime-groundrouting\nlime-location\nlime-metrics\nlime-openairview\nlime-utils\nlog\nnetwork\nnetwork.device\nnetwork.interface\nnetwork.interface.lan\nnetwork.interface.lm_net_batadv_dummy_if\nnetwork.interface.lm_net_br_lan_anygw_if\nnetwork.interface.lm_net_eth0_1_babeld_if\nnetwork.interface.lm_net_eth0_babeld_if\nnetwork.interface.lm_net_eth1_babeld_if\nnetwork.interface.lm_net_eth1_batadv_if\nnetwork.interface.lm_net_wlan0_mesh\nnetwork.interface.lm_net_wlan0_mesh_babeld_if\nnetwork.interface.lm_net_wlan0_mesh_batadv_if\nnetwork.interface.lm_net_wlan1_mesh\nnetwork.interface.lm_net_wlan1_mesh_babeld_if\nnetwork.interface.lm_net_wlan1_mesh_batadv_if\nnetwork.interface.loopback\nnetwork.interface.wan\nnetwork.interface.wan6\nnetwork.rrdns\nnetwork.wireless\npirania\npirania-app\nservice\nsession\nsystem\nuci\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Esses são os serviços que podemos interagir através do servidor "},{type:b,tag:c,props:{},children:[{type:a,value:"ubusd"}]},{type:a,value:". Para saber quais processos\u002Fmétodos e argumentos passar para cada serviço devemos passar um parametro "},{type:b,tag:c,props:{},children:[{type:a,value:"-v"}]},{type:a,value:" e o nome do serviço:"}]},{type:a,value:d},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"root@conteiner:~# ubus -v list lime-utils\n'lime-utils' @7d3f82ec\n    \"get_cloud_nodes\":{\"no_params\":\"Integer\"}\n    \"get_community_settings\":{\"no_params\":\"Integer\"}\n    \"get_config\":{\"no_params\":\"Integer\"}\n    \"set_notes\":{\"text\":\"String\"}\n    \"change_config\":{\"name\":\"String\",\"ip\":\"String\"}\n    \"safe_reboot\":{\"action\":\"String\",\"value\":\"String\"}\n    \"get_notes\":{\"no_params\":\"Integer\"}\n    \"get_node_status\":{\"no_params\":\"Integer\"}\n\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Nesse exemplo vemos como chamar o "},{type:b,tag:c,props:{},children:[{type:a,value:p}]},{type:a,value:" que é um pacote do "},{type:b,tag:f,props:{href:"https:\u002F\u002Flibremesh.org",rel:[l,m,n],target:o},children:[{type:a,value:"libremesh"}]},{type:a,value:B}]},{type:a,value:d},{type:b,tag:v,props:{id:t},children:[{type:b,tag:f,props:{href:"#chamando-servi%C3%A7os-com-o-ubus",ariaHidden:w,tabIndex:x},children:[{type:b,tag:y,props:{className:[z,A]},children:[]}]},{type:a,value:u}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Vamos aproveitar o exemplo anterior e vamos chamar o serviço "},{type:b,tag:c,props:{},children:[{type:a,value:p}]},{type:a,value:", para isso vamos usar o comando "},{type:b,tag:c,props:{},children:[{type:a,value:"call"}]},{type:a,value:B}]},{type:a,value:d},{type:b,tag:g,props:{className:[h]},children:[{type:b,tag:i,props:{className:[j,k]},children:[{type:b,tag:c,props:{},children:[{type:a,value:"root@conteiner:~# ubus call lime-utils get_cloud_nodes\n{\n    \"nodes\": [\n        \"alessandra\",\n        \"anapaula\",\n        \"arcanjo\",\n        \"axel\",\n        \"bardaana\",\n        \"conteiner\",\n        \"cpeconteiner\",\n        \"espacoterra\",\n        \"felipe\",\n        \"gateway\",\n        \"katia\",\n        \"lais\",\n        \"luh\",\n        \"marquinhos\",\n        \"potyra\",\n        \"sede\",\n        \"soraya\",\n        \"torredama\",\n        \"torregruta\",\n        \"tvbraga\",\n        \"vanessa\",\n        \"yasmin\",\n        \"ze\"\n    ],\n    \"status\": \"ok\"\n}\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Esse comando chama o serviço de acordo com os parametros requeridos, como vimos na saida do comando "},{type:b,tag:c,props:{},children:[{type:a,value:"list"}]},{type:a,value:" o serviço "},{type:b,tag:c,props:{},children:[{type:a,value:p}]},{type:a,value:" tem um argumento que é o "},{type:b,tag:c,props:{},children:[{type:a,value:"get_cloud_nodes"}]},{type:a,value:" quem não precisa de nenhum parametro, por isso a linha ficou "},{type:b,tag:c,props:{},children:[{type:a,value:"ubus call lime-utils get_cloud_nodes"}]},{type:a,value:", que nos retorna todos os pontos da rede mesh pelo hostname de cada um."}]}]},dir:"\u002Fposts",path:"\u002Fposts\u002FUtilizando Ubus no LiMe-LROs",extension:".md",createdAt:"2022-02-01T21:04:27.464Z",updatedAt:"2022-02-01T21:53:03.222Z"}}],fetch:{},mutations:void 0}}("text","element","code","\n","p","a","div","nuxt-content-highlight","pre","language-text","line-numbers","nofollow","noopener","noreferrer","_blank","lime-utils","iniciando-com-ubus",2,"Iniciando com Ubus","chamando-serviços-com-o-ubus","Chamando serviços com o ubus","h2","true",-1,"span","icon","icon-link",".")));