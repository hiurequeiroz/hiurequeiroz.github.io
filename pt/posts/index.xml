<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Hiure Queiroz</title><link>https://hiurequeiroz.github.io/pt/posts/</link><description>Recent content in Posts on Hiure Queiroz</description><generator>Hugo</generator><language>pt-BR</language><lastBuildDate>Thu, 15 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://hiurequeiroz.github.io/pt/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Testando Nova Versão do LibreMesh</title><link>https://hiurequeiroz.github.io/pt/posts/test-new-lime/</link><pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate><guid>https://hiurequeiroz.github.io/pt/posts/test-new-lime/</guid><description>&lt;h3 id="motivação">Motivação&lt;/h3>
&lt;p>Testar roteadores com a versão mais recente do LibreMesh é crucial para as redes comunitárias que dependem de redes mesh como sua infraestrutura de comunicação. A importância reside no fato de que testes insuficientes dificultam o desenvolvimento de novas versões. Atualmente, a versão oficial do LibreMesh está vinculada ao lançamento de 2019 do OpenWRT. Essa limitação impede o progresso, pois avanços e melhorias frequentemente são deixados inexplorados. Ao realizar testes minuciosos com a versão mais recente, abrimos caminho para recursos aprimorados, maior estabilidade e melhor desempenho geral. É por meio desses testes que identificamos e abordamos possíveis problemas, garantindo uma plataforma robusta e confiável para as redes comunitárias. Avançar além da versão 2019 do OpenWRT abre oportunidades para inovação e mantém o LibreMesh na vanguarda da tecnologia de redes mesh. Portanto, um esforço conjunto nos testes é essencial para impulsionar a evolução do LibreMesh e contribuir para o crescimento contínuo das redes de comunicação baseadas em mesh impulsionadas pela comunidade.#&lt;/p></description></item><item><title>Como criar uma rede Libremesh com Servidor Lokal</title><link>https://hiurequeiroz.github.io/pt/posts/libremeshlokal/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://hiurequeiroz.github.io/pt/posts/libremeshlokal/</guid><description>&lt;h2 id="lokal">Lokal&lt;/h2>
&lt;p>Como parte do &lt;a href="https://wakoma.co/lokal/">projeto lokal&lt;/a>, os testes com dois roteadores Archer A7 V5.8 e Unifi Mesh UAP-AC-M estão descritos abaixo&lt;/p>
&lt;p>firmwares libremesh -&amp;gt; &lt;a href="https://next.coolab.org/s/Eiz7r9xJKiXi8MA">https://next.coolab.org/s/Eiz7r9xJKiXi8MA&lt;/a>&lt;/p>
&lt;h3 id="unifi-mesh-uap-ac-m">Unifi Mesh UAP-AC-M&lt;/h3>
&lt;p>Folha de dados Unifi -&amp;gt; &lt;a href="http://dl.ubnt.com/datasheets/unifi/UniFi_AC_Mesh_DS.pdf">http://dl.ubnt.com/datasheets/unifi/UniFi_AC_Mesh_DS.pdf&lt;/a>&lt;/p>
&lt;p>Siga estes passos -&amp;gt; &lt;a href="https://openwrt.org/toh/ubiquiti/unifiac?s[]=unifi&amp;amp;s[]=mesh#non-invasive_method_using_mtd">https://openwrt.org/toh/ubiquiti/unifiac?s[]=unifi&amp;s[]=mesh#non-invasive_method_using_mtd&lt;/a>&lt;/p>
&lt;p>Breve&lt;/p>
&lt;p>Vamos fazer o downgrade para uma versão mais antiga do firmware ubiquiti (ubnt.bin), instalar o firmware OpenWRT e, em seguida, instalar o firmware Libremesh.&lt;/p>
&lt;ol>
&lt;li>Baixe o ubnt.bin da pasta&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>md5sum BZ*.bin deve retornar: 5bb23b387defcbd1f6cda5819c7905e5&lt;/li>
&lt;li>mv BZ*.bin ubnt.bin&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>
&lt;p>IP estático (192.168.1.0/24, não use IP 192.168.1.20 ou 192.168.1.1 para o computador, se não tiver certeza, use o IP 192.168.1.10, máscara de rede 255.255.255.0, gateway padrão 192.168.1.1 para o PC)&lt;/p></description></item><item><title>Como Usar o Ubus no Libremesh</title><link>https://hiurequeiroz.github.io/pt/posts/utilizando-ubus-no-libremesh/</link><pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate><guid>https://hiurequeiroz.github.io/pt/posts/utilizando-ubus-no-libremesh/</guid><description>&lt;h3 id="tutorial-introdução-ao-ubus-no-libremesh-para-iniciantes">Tutorial: Introdução ao Ubus no Libremesh para Iniciantes&lt;/h3>
&lt;h4 id="passo-1-o-que-é-ubus-e-libremesh">Passo 1: O que é Ubus e Libremesh&lt;/h4>
&lt;p>O Ubus é uma ferramenta poderosa para gerenciar redes mesh baseadas em OpenWrt, como o Libremesh. Ele facilita a comunicação entre processos do sistema, fornecendo uma base completa de informações. Saiba mais sobre o &lt;a href="https://openwrt.org/docs/techref/ubus">Ubus&lt;/a> e o &lt;a href="https://libremesh.org">Libremesh&lt;/a>.
Como o Ubus é um programa instalado dentro do roteador você precisa acessar o terminal do roteador &lt;a href="https://hiurequeiroz.github.io/pt/posts/como-ascessar-roteador-por-ssh/">Veja como fazer isso aqui&lt;/a>&lt;/p></description></item><item><title>Acesso Remoto a Roteadores via SSH em redes libremesh</title><link>https://hiurequeiroz.github.io/pt/posts/como-ascessar-roteador-por-ssh/</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><guid>https://hiurequeiroz.github.io/pt/posts/como-ascessar-roteador-por-ssh/</guid><description>&lt;p>Para acessar um roteador via SSH, siga os passos abaixo. Este guia assume que você está utilizando um sistema baseado em Linux, como Debian ou Ubuntu.&lt;/p>
&lt;h3 id="pré-requisitos">Pré-requisitos&lt;/h3>
&lt;p>Antes de começar, é necessário ter o pacote &lt;a href="#ZgotmplZ">openssh-client&lt;/a> instalado em seu sistema. Este pacote permite que você inicie conexões SSH a partir do seu terminal.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Instalação do openssh-client&lt;/strong>&lt;/p>
&lt;p>Abra o terminal e execute o comando abaixo para atualizar os pacotes do seu sistema e instalar o &lt;a href="#ZgotmplZ">openssh-client&lt;/a>:&lt;/p></description></item><item><title>Como fazer o pão selvagem</title><link>https://hiurequeiroz.github.io/pt/posts/como-fazer-pao-selvagem/</link><pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate><guid>https://hiurequeiroz.github.io/pt/posts/como-fazer-pao-selvagem/</guid><description>&lt;p>Uma das coisas que mais me deixa feliz é fazer pão. Gosto muito de mergulhar nas profundezas das proteínas e imaginar cada ligação química que pode estar sendo feita ou desfeita durante o processo.
Para fazer pão eu entendi ao londo do tempo que é necessário paciência para chegar num resultado satisfatório. Paciência tanto para esperar o momento certo de fazer algo, de deixar que a química aconteça e também paciência para testar farinhas e achar o melhor fornecedor.&lt;/p></description></item><item><title>Conhecendo o arduino</title><link>https://hiurequeiroz.github.io/pt/posts/arduino/</link><pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate><guid>https://hiurequeiroz.github.io/pt/posts/arduino/</guid><description>&lt;h2 id="arduíno">Arduíno&lt;/h2>
&lt;p>Arduíno é uma plataforma de prototipagem, ou seja, ele foi idealizado para servir de base para diferentes projetos que necessitem de circuitos eletrônicos microcontrolados, baseados em linguagem de programação C/C++.
O microcontrolador é um pequeno computador que num único circuito integrado, já com núcleo de processador, memória e pinos de entrada e saída de informação.
O Arduíno foi desenvolvido na cidade de Ivrea na Itália, o time era composto por Massimo Banzi, David Cuartielles, Tom Igoe, Gianluca Martino e David Mellis, com o objetivo de interagir com projetos escolares de maneira mais fácil e resiliente do que os sistemas de prototipagem dá época (2005).
O sucesso do Arduíno foi tão grande que logo que foi projetado começou a ser comercializado e venderam mais de 50 mil unidades, e um &lt;a href="http://vimeo.com/18539129">documentário&lt;/a> foi feito para sobre a trajetória do desenvolvimento.&lt;/p></description></item><item><title>Conhecendo o Esp32</title><link>https://hiurequeiroz.github.io/pt/posts/esp32/</link><pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate><guid>https://hiurequeiroz.github.io/pt/posts/esp32/</guid><description>&lt;h2 id="esp32">ESP32&lt;/h2>
&lt;p>O ESP32 é uma plataforma de prototipagem com microcontrolador, semelhante ao &lt;a href="https://hiurequeiroz.github.io/pt/posts/arduino/">Arduino&lt;/a>, porém com maior desempenho em aplicações que envolvem wifi e baixo consumo de energia. Ele representa uma evolução do conhecido ESP8266, oferecendo maior capacidade de processamento.&lt;/p>
&lt;p>O ESP32 é um SOC (System on a Chip) que integra microcontrolador, wifi e bluetooth BLE. Desenvolvido pela Espressif Systems, o ESP32 possui características interessantes, como:&lt;/p>
&lt;p>&lt;img src="https://hiurequeiroz.github.io/images/Modulo-ESP32-DEV-Module.png" alt="Placa ESP32">&lt;/p>
&lt;p>A placa contém o chip ESP32 com antena embutida, uma interface usb-serial e regulador de tensão de 3.3V. A programação pode ser realizada em LUA ou utilizando a IDE do Arduino com um cabo micro-usb. Com 4 MB de memória flash, o ESP32 possibilita a criação de diversas aplicações para projetos de IoT, acesso remoto, servidores web e registradores de dados, entre outros.&lt;/p></description></item></channel></rss>